---

import BasePage from "../../layouts/BasePage.astro"
import Content from "../../layouts/Content.astro"
import trashCan from "../../assets/images/trashcan.svg"
import editPencil from "../../assets/images/edit-pencil.svg"
---
<BasePage title="SortableList">
	<Content header="Ranking List">
		<form id="addForm" class="mb-2" >
			<label for="entry">Add an item:</label>
			<input type="text" class="text-slate-600 rounded-md text-sm shadow-sm px-3 py-1.5 mb-2" placeholder="new entry" id="newItem">
			<button id="addButton" class="rounded-md px-3 py-1.5 text-sm shadow-sm">add</button>
		</form>
		<ol id="sortList" class="moveable grid"></ol>
		<div>
			<button id="downloadButton" class="lex mb-2 w-full justify-center rounded-md px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm" >Download List</button>
			<button id="clearButton" class="lex w-full justify-center rounded-md px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm ">Clear</button>
		</div>
		<img src={trashCan.src} id="trashcan" class="invisible editItem" alt="trashcan" height="25" width="25"/>
		<img src={editPencil.src} id="editPencil" class="invisible editItem" alt="editIcon" height="25" width="25"/>
		<div class="optionEntry invisible"></div>
	</Content>
</BasePage>
<style is:inline>
.editItem {
	cursor:pointer;
}
[draggable="true"] {
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}
ol {
  counter-reset: entryCount; /* Set a counter named 'li', and its initial value is 0. */
}
ol.moveable {
  margin: 0px;
  margin-bottom: 5px;
  padding-left: 20px;
  list-style-type: decimal;
  padding-bottom: 20px;
  border-bottom: 1px solid grey;
}
li {
    margin: 10px;
    padding: 4px;
    border-radius: 4px;
    cursor: move;
    cursor: grab;
	position: relative;
}
li:active {
    cursor: grabbing;
}
li:hover {
    background-color: grey;
}
li:before {
	counter-increment: entryCount;
	content: counter(entryCount) ". ";
	position: absolute;
	left: -15px;
	top: 5px;
}
.optionEntry {
	display: grid;
	grid-template-columns: 20% 25px 25px;
}
button {
    border: 1px solid white;
}
</style>
<script>
const button = document.getElementById("addButton") as HTMLButtonElement
const input =  document.getElementById("newItem") as HTMLInputElement
const form = document.getElementById("addForm") as HTMLFormElement
const list = document.getElementById("sortList") as HTMLOListElement
const downloadButton = document.getElementById("downloadButton") as HTMLButtonElement
const clearButton = document.getElementById("clearButton") as HTMLButtonElement 
const editPencil = document.getElementById("editPencil") as HTMLImageElement
const trashCan = document.getElementById("trashcan") as HTMLImageElement
const saveToStorage  = () => {
	const items = Array.from(list.children).map(ele => ele.textContent)
	localStorage.setItem("rankingList", JSON.stringify(items))
}
const loadFromStorage = () => {
	const list = JSON.parse(localStorage.getItem("rankingList") || "")
	if (list) {
		list.forEach((element: string) => {
			addListItem(element)
		})
	}
}
const downloadList = (e) => {
	const content = Array.from(list.children).map((ele, idx) => `${idx+1}. ${ele.textContent}`).join("\n")
	const element = document.createElement("a")
	element.setAttribute("href", "data:text/plain;charset=utf-8,"+encodeURIComponent(content))
	element.setAttribute("download", "ranking.txt")
	element.style.display = "none"
	document.body.append(element)
	element.click()
	document.body.removeChild(element)

}
downloadButton.addEventListener("click", downloadList)

form?.addEventListener("submit", e => {
   	e.preventDefault()
})
const getIndex = e => {
	const element = e.target.closest("li")
	return Array.from(list.children).indexOf(element)
}
const dragStart = (e) => {
	e.dataTransfer.setData("text/plain", getIndex(e))
}
const drop = (e) => {
	cancelDefault(e)
	const oldIndex = e.dataTransfer.getData("text/plain")
	const target = ["SPAN", "IMG"].includes(e.target.tagName) ? e.target.parentElement : e.target
	const newIndex = Array.from(list.children).indexOf(target)
	const node = list.children[oldIndex]
	list.removeChild(list.children[oldIndex])
	list.insertBefore(node, list.children[newIndex])
	saveToStorage()
}
const cancelDefault = (e) => {
	e.preventDefault()
	e.stopPropagation()
	return false
}
const touchStart = (element) => (e) => {
	cancelDefault(e)
	const index = Array.from(list.children).indexOf(element)
    
}

const touchEnd = (element) => (e) => {
	cancelDefault(e)
	const index = Array.from(list.children).indexOf(element)
	const targetCoords = e.changedTouches
	if (targetCoords) {
		const ele = document.elementFromPoint(
			targetCoords[0].clientX,
			targetCoords[0].clientY
		)
		drop({
			target: ele,
			dataTransfer: {
				getData: () => index
			},
			preventDefault: () => {},
			stopPropagation: () => {}
		})
	}
}

const createIcons = (text: string ) => {
	const edit = editPencil.cloneNode(true) as HTMLImageElement
	const trash = trashCan.cloneNode(true) as HTMLImageElement
	edit.setAttribute("id", `${text}-edit`)
	edit.classList.remove("invisible")
	edit.addEventListener("click", () => {
		if (!edit.parentElement) return
		const setText = edit.parentElement.getElementsByTagName("span")[0]
		if (!setText) return 
		const changedValue = prompt("Change the Entry", setText.innerText)
		if (changedValue && changedValue !== setText.innerText && changedValue.length > 0) {
			setText.innerText = changedValue
		}
	})
	trash.setAttribute("id", `${text}-trash`)
	trash.classList.remove("invisible")
	trash.addEventListener("click", () => list.removeChild(trash.parentElement))
	return [edit,trash]
}

const addListItem = (text: string) => {
	const li = document.createElement("li")
	const [edit, trash] = createIcons(text)
	const textContent = document.createElement("span") as HTMLSpanElement
	textContent.addEventListener("drop", (e) => {
		e.preventDefault()
		return false
	})
	textContent.appendChild(document.createTextNode(text))
	li.appendChild(textContent)
	li.classList.add("optionEntry")
	li.appendChild(edit)
	li.appendChild(trash)
	li.classList.add("cursor-grab", "active:cursor-grabbing", "active:bg-gray-500")
	li.setAttribute("draggable", "true")
	li.addEventListener("dragstart", dragStart)
	li.addEventListener("touchstart", touchStart(li))
	li.addEventListener("touchend", touchEnd(li))
	li.addEventListener("drop", drop)
	li.addEventListener("dragenter", cancelDefault)
	li.addEventListener("dragover", cancelDefault)
	list.appendChild(li)
	saveToStorage()
}
button?.addEventListener("click", () => {
	if (input.value.length === 0 ) return
	addListItem(input.value)
	input.value = ""
})
clearButton.addEventListener("click", () => {
	list.innerHTML = ""
	saveToStorage()
})
loadFromStorage()
</script>
